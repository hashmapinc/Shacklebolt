service: shacklebolt-serverless 

# define custom variables 
custom:
  stage: ${opt:stage, self:provider.stage}
  dynamoThroughputs:
    dev: 1
    default: 1
  tagsTable:
    name: shacklebolt-tags-${self:custom.stage}
    throughput: ${self:custom.dynamoThroughputs.${self:custom.stage}, self:custom.dynamoThroughputs.default}
  filesTable:
    name: shacklebolt-files-${self:custom.stage}
    throughput: ${self:custom.dynamoThroughputs.${self:custom.stage}, self:custom.dynamoThroughputs.default}

# define global service values 
provider:
  name: aws
  runtime: python3.6
  tags:
    project: shacklebolt
    team: innovation
  profile: default # aws config provile to use from ~/.aws/config
  apiName: shacklebolt
  stackTags: # Optional CF stack tags
    team: innovation
    project: shacklebolt
  environment:
    DYNAMO_TAGS_TABLE: ${self:custom.tagsTable.name}
    DYNAMO_FILES_TABLE: ${self:custom.filesTable.name}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "Fn::GetAtt": [ FilesTable, Arn ]
        - "Fn::GetAtt": [ TagsTable, Arn ]

# define individual functions
functions:
  search:
    description: searches for matching files and returns all file metadata
    handler: search.handler
    environment:
      DYNAMO_TAGS_TABLE: shacklebolt.tags.DEV
      DYNAMO_FILES_TABLE: shacklebolt.files.DEV
    events:
      - http:
          path: search
          method: get
          authorizer:
            name: authorizer
            arn: arn:aws:cognito-idp:us-east-1:660239660726:userpool/us-east-1_FfH14h8MR
          cors:
            origin: '*'
            maxAge: 86400

# Create resources with separate CloudFormation templates
resources:
  # DynamoDB
  - ${file(./resources/dynamo-tags.yaml)}
  - ${file(./resources/dynamo-files.yaml)}